{
  
    
        "post0": {
            "title": "Creating a Simpler Model",
            "content": "# your machine to run the code !pip install -Uqq fastbook import fastbook fastbook.setup_book() . voila 0.2.3 has requirement nbconvert&lt;7,&gt;=6.0.0, but you&#39;ll have nbconvert 5.6.1 which is incompatible. . /home/juancruzalric/.pyenv/versions/3.7.4/envs/fastai/lib/python3.7/site-packages/fastbook/__init__.py:22: UserWarning: Missing `graphviz` - please run `conda install fastbook` except ModuleNotFoundError: warn(&#34;Missing `graphviz` - please run `conda install fastbook`&#34;) . from fastai.vision.all import * from fastbook import * # We are going to work with grey scale images matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) . Mnist Dataset . Mnist Dataset contains a lot of images from 0 to 9. We are going to try and classify any image as a 3 or a 7 . URLs.MNIST_SAMPLE . &#39;https://s3.amazonaws.com/fast-ai-sample/mnist_sample.tgz&#39; . path = untar_data(URLs.MNIST_SAMPLE) . path . Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample&#39;) . path.ls() . (#3) [Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train&#39;),Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/valid&#39;),Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/labels.csv&#39;)] . ls() &gt; is a method created by fastai. It let you see what is inside the directory. It will return a object called by &quot;L&quot;. It has the same functionality as a &quot;list&quot; in python. . We can also see that we have a train directory and a valid directory . (path/&#39;train&#39;).ls() . (#2) [Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train/3&#39;),Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train/7&#39;)] . There are two directories inside &quot;/train&quot; one is &quot;/train/7&quot; and the other one is &quot;/train/3&quot;. The &quot;/3&quot; and &quot;/7&quot; represents the labels of the data . threes = (path/&#39;train&#39;/&#39;3&#39;).ls().sorted() sevens = (path/&#39;train&#39;/&#39;7&#39;).ls().sorted() threes . (#6131) [Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train/3/10.png&#39;),Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train/3/10000.png&#39;),Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train/3/10011.png&#39;),Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train/3/10031.png&#39;),Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train/3/10034.png&#39;),Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train/3/10042.png&#39;),Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train/3/10052.png&#39;),Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train/3/1007.png&#39;),Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train/3/10074.png&#39;),Path(&#39;/home/juancruzalric/.fastai/data/mnist_sample/train/3/10091.png&#39;)...] . Lets try and print out one of the images . img3_path = threes[1] im3 = Image.open(img3_path) im3 . img7_path = sevens[1] im7 = Image.open(img7_path) im7 . But sadly... a computer only undestands numbers we will need to transform this images . array(im3)[4:10,4:10] . array([[ 0, 0, 0, 0, 0, 0], [ 0, 0, 0, 0, 0, 29], [ 0, 0, 0, 48, 166, 224], [ 0, 93, 244, 249, 253, 187], [ 0, 107, 253, 253, 230, 48], [ 0, 3, 20, 20, 15, 0]], dtype=uint8) . We are printing rows from 4 up to 10 (not including 10) and columns 4 to 10 (not including 10) . We can see it more clearly using a Dataframe (Pandas library). . type(array(im3)) . numpy.ndarray . type(tensor(im3)) . torch.Tensor . tensors and numpy arrays are similar. However tensors let you run your operations in the GPU making your work process faster. We are going to use tensors from now on. . img3_t = tensor(im3) df = pd.DataFrame(img3_t[4:22, 4:22]) ## Just setting the font-size and a background color as Grey with some gradient to see the ## density of the pixels df.style.set_properties(**{&#39;font-size&#39;:&#39;10pt&#39;}).background_gradient(&#39;Greys&#39;) . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 . 0 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 0 | 0 | 0 | 0 | 0 | 29 | 150 | 195 | 254 | 255 | 254 | 176 | 193 | 150 | 96 | 0 | 0 | 0 | . 2 0 | 0 | 0 | 48 | 166 | 224 | 253 | 253 | 234 | 196 | 253 | 253 | 253 | 253 | 233 | 0 | 0 | 0 | . 3 0 | 93 | 244 | 249 | 253 | 187 | 46 | 10 | 8 | 4 | 10 | 194 | 253 | 253 | 233 | 0 | 0 | 0 | . 4 0 | 107 | 253 | 253 | 230 | 48 | 0 | 0 | 0 | 0 | 0 | 192 | 253 | 253 | 156 | 0 | 0 | 0 | . 5 0 | 3 | 20 | 20 | 15 | 0 | 0 | 0 | 0 | 0 | 43 | 224 | 253 | 245 | 74 | 0 | 0 | 0 | . 6 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 249 | 253 | 245 | 126 | 0 | 0 | 0 | 0 | . 7 0 | 0 | 0 | 0 | 0 | 0 | 0 | 14 | 101 | 223 | 253 | 248 | 124 | 0 | 0 | 0 | 0 | 0 | . 8 0 | 0 | 0 | 0 | 0 | 11 | 166 | 239 | 253 | 253 | 253 | 187 | 30 | 0 | 0 | 0 | 0 | 0 | . 9 0 | 0 | 0 | 0 | 0 | 16 | 248 | 250 | 253 | 253 | 253 | 253 | 232 | 213 | 111 | 2 | 0 | 0 | . 10 0 | 0 | 0 | 0 | 0 | 0 | 0 | 43 | 98 | 98 | 208 | 253 | 253 | 253 | 253 | 187 | 22 | 0 | . 11 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 9 | 51 | 119 | 253 | 253 | 253 | 76 | 0 | . 12 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 183 | 253 | 253 | 139 | 0 | . 13 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 182 | 253 | 253 | 104 | 0 | . 14 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 85 | 249 | 253 | 253 | 36 | 0 | . 15 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 60 | 214 | 253 | 253 | 173 | 11 | 0 | . 16 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 98 | 247 | 253 | 253 | 226 | 9 | 0 | 0 | . 17 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 42 | 150 | 252 | 253 | 253 | 233 | 53 | 0 | 0 | 0 | . Creating a SIMPLE Model . We are going to create a simple model that takes the AVG (averages) of each class to predict and use that to check if a new image pixels are near the average of the 3 or the 7. . seven_tensors = [tensor(Image.open(path)) for path in sevens] three_tensors = [tensor(Image.open(path)) for path in threes] len(three_tensors), len(seven_tensors) . (6131, 6265) . This is getting each path for the corresponding images and transforming them into a tensor, however all those tensors are inside a list . type(seven_tensors) . list . type(seven_tensors[0]) . torch.Tensor . show_image(seven_tensors[5]); . show_image() is going to transform those tensors into a image because each value inside the tensor represent a pixel . We would like to compute the avg of the density of each pixel. We will neet to stack each image and create a 3 dimencional tensor, which the hight is going to be the amount of images, and the other 2 dimensions are going to be 28x28 pixels size. We can use the stack method given us by pytorch. . stacked_sevens = torch.stack(seven_tensors).float() / 255 stacked_threes = torch.stack(three_tensors).float() / 255 stacked_threes.shape . torch.Size([6131, 28, 28]) . we can also check the dimensions by calling ndim . stacked_threes.ndim . 3 . mean3 = stacked_threes.mean(0) show_image(mean3) . &lt;AxesSubplot:&gt; . mean7 = stacked_sevens.mean(0) show_image(mean7) . &lt;AxesSubplot:&gt; . Now we have the ideal digits for 3 and 7. Let us pick an arbitrary 3 and measure its distance to the ideal one. We are going to explain two different ways . Take the mean of the absolute value of differences (absolute value is the function that replaces negative values with positive values). This is called the mean absolute difference or L1 norm | Take the mean of the square of differences (which makes everything positive) and then take the square root (which undoes the squaring). This is called the root mean squared error (RMSE) or L2 norm. | . a_3 = stacked_threes[3] show_image(a_3); . dist_3_abs = (a_3 - mean3).abs().mean() dist_3_sqr = ((a_3 - mean3)**2).mean().sqrt() dist_3_abs, dist_3_sqr . (tensor(0.1154), tensor(0.2064)) . dist_7_abs = (a_3 - mean7).abs().mean() dist_7_sqr = ((a_3 - mean7)**2).mean().sqrt() dist_7_abs, dist_7_sqr . (tensor(0.1669), tensor(0.3170)) . We can see that the distance betweem the 3 and the &quot;ideal&quot; 3 is shorter than the &quot;ideal&quot; 7 pytorch already provides both of these as loss functions . F.l1_loss(a_3.float(), mean7), F.mse_loss(a_3, mean7).sqrt() . (tensor(0.1669), tensor(0.3170)) . The mean_square_error will penalize bigger mistakes more heavily and be more lenient with small mistakes . Metric . A metric is a number that is calculated based on the predictions of our model, and the correct labels in our dataset, in order to tell us how good our model is. Remeber that the Mnist dataset already has a directory called &quot;Valid&quot;. This directory contains the data where we are going to calculate how well our model operates. . We are going to use the &#39;stack&#39; pytorch operation to stack all the images contain in de valid directory . valid_3_tens = torch.stack([tensor(Image.open(path)) for path in (path/&#39;valid&#39;/&#39;3&#39;).ls()]) valid_3_tens = valid_3_tens.float()/255 valid_7_tens = torch.stack([tensor(Image.open(path)) for path in (path/&#39;valid&#39;/&#39;7&#39;).ls()]) valid_7_tens = valid_7_tens.float()/255 valid_3_tens.shape,valid_7_tens.shape . (torch.Size([1010, 28, 28]), torch.Size([1028, 28, 28])) . Here we see two tensors, one representing the 3s validation set of 1,010 images of size 28×28, and one representing the 7s validation set of 1,028 images of size 28×28. . We can write a simple function that calculates the mean absolute error using an experssion very similar to the one we wrote in the last section: . def mnist_distance(a,b): return (a-b).abs().mean((-1,-2)) . valid_3_dist = mnist_distance(valid_3_tens, mean3) valid_3_dist, valid_3_dist.shape . (tensor([0.1605, 0.1107, 0.1181, ..., 0.1419, 0.1103, 0.1162]), torch.Size([1010])) . We can use mnist_distance to figure out whether an image is a 3 or not by using the following logic: if the distance between the digit in question and the ideal 3 is less than the distance to the ideal 7, then it&#39;s a 3. This function will automatically do broadcasting and be applied elementwise, just like all PyTorch functions and operators: . def is_3(x): return mnist_distance(x, mean3) &lt; mnist_distance(x, mean7) . Let&#39;s test it with one of our examples . is_3(a_3), is_3(a_3).float() . (tensor(True), tensor(1.)) . is_3(valid_3_tens) . tensor([False, True, True, ..., True, True, True]) . Now we can calculate the accuracy for each of the 3s and 7s by taking the average of that function for all 3s and its inverse for all 7s: . accuracy_3s = is_3(valid_3_tens).float().mean() accuracy_7s = (1- is_3(valid_7_tens).float()).mean() accuracy_3s, accuracy_7s, (accuracy_3s+accuracy_7s)/2 . (tensor(0.9168), tensor(0.9854), tensor(0.9511)) . We&#39;re getting over 90% accuracy on both 3s and 7s, and we&#39;ve seen how to define a metric conveniently using broadcasting. . However: 3s and 7s are very different-looking digits. And we&#39;re only classifying 2 out of the 10 possible digits so far. So we&#39;re going to need to do better! . But now we know a simpler model that can predict with a 95% accuracy and if we create a deep learning model that predict with 94% accuracy we can clearly see that is not a good model and we will need to try other things. .",
            "url": "https://juanchoalric.github.io/ai_journey/deep-learning/jupyter/fastai/2020/09/28/creating-simple-model.html",
            "relUrl": "/deep-learning/jupyter/fastai/2020/09/28/creating-simple-model.html",
            "date": " • Sep 28, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastai First Chapter",
            "content": "Why is it hard to use a traditional computer program to recognize images in a photo? . We are going to answer this question by giving an example: Imagine that you make a program that tells you if the image that you pass is an apple . . But not every apple has the same size and color... . . Image creating a bunch of manual rules for only one image just to get rekt by the second image they give you. . And that&#39;s why machine learning is perfect for solving image detection problems, just let the computer create her own rules that work for any apple image. . What did the author mean by &quot;weight assignment&quot;? . Weight assignments are a specific way to add values to the current weights. In deep learning we use Parameters to refer to &quot;weights&quot; . What is the name of the theorem that shows that a neural network can solve any mathematical problem to any level of accuracy? . The universal approximation theorem shows that this function can solve any problem to any level of accuracy, in theory. . Neural network diagram . . What do you need in order to train a model? . You need DATA. If you are working in a supervise problem you also need the labels for that particula dataset . Do we always have to use 224&#215;224-pixel images with the cat recognition model? . No, 224x224 is a well establish size known by researchers, but you can use the size you want. Just take into account that if you increase the size you may get better predictions because the model can track more data. However, you will lose speed in training your model. . What is the difference between classification and regression? . The difference between classification and regression is the target you want to predict. In REGRESSION problems you want to predict a number (ex:123). In CLASSIFICATION problems you want to predict a specific class (ex: if its a dog or a cat) . What is a validation set? What is a test set? Why do we need them? . A validation set is used to tell if our model is performing better in each iteration in the training face. The test set is only used when we are completely sure that we are going to use that model and we are ready to deploy de model to production. . What will fastai do if you don&#39;t provide a validation set? . It will create a validation set for you . What is overfitting? Provide an example. . Overfitting is when your model memorizes all your training set so well that when given new unseen data it gives a terrible result. Example: Image a teacher tells you to only study from these questions for the exam. However, when the day of the exam arrives the test is completely different. You study only the questions by hard but you only can answer exactly those. If you are given another set of questions you would perform poorly. . What is a metric? How does it differ from &quot;loss&quot;? . A metric is a measurement of how good the model is, using the validation set, chosen for human perception. However, the loss is also a measure of how good the model is, chosen to drive training via SGD and in charge of modifying the parameters. . How can pretrained models help? . Transfer learning models help us because they already have their weights already initialized. It will also reduce the amount of time we are going to need our model to train and also the amount of data that we need to have. . What is the &quot;head&quot; of a model? . The head of a model is the part that is newly added to be specific to the new dataset. . What is an &quot;architecture&quot;? . An &quot;architecture&quot; is the actual mathematical function that we&#39;re passing the input data and parameters to . What is segmentation? . Creating a model that can recognize the content of every individual pixel in an image is called segmentation. . What is y_range used for? When do we need it? . Y_range is used when you&#39;re predicting a continuous number, rather than a category, so we have to tell fastai what range our target has, using the y_range parameter. . Summary . The first chapter was a perfect and clear introduction to a lot of words that we use all-day in Data Science. Hopefully, in the following chapters, we can get more deeply into these subjects. .",
            "url": "https://juanchoalric.github.io/ai_journey/deep-learning/jupyter/fastai/2020/09/26/fastai-first-questioner.html",
            "relUrl": "/deep-learning/jupyter/fastai/2020/09/26/fastai-first-questioner.html",
            "date": " • Sep 26, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://juanchoalric.github.io/ai_journey/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://juanchoalric.github.io/ai_journey/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://juanchoalric.github.io/ai_journey/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://juanchoalric.github.io/ai_journey/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}